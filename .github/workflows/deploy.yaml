name: Infra + Deploy na AWS EC2

on:
  push:
    branches:
      - main

jobs:
  infra:
    name: Provisionar Infraestrutura com Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositório
        uses: actions/checkout@v3

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1  # Mude para sua região

      - name: Inicializar Terraform
        run: terraform init
        working-directory: terraform/
      
      - name: Planejar Terraform
        run: |
          terraform plan \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_pass=${{ secrets.DB_PASS }}" \
            -var="db_name=${{ secrets.DB_NAME }}" \
            -var="ip=${{ secrets.IP }}"
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Aplicar Terraform
        run: |
          terraform apply -auto-approve \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_pass=${{ secrets.DB_PASS }}" \
            -var="db_name=${{ secrets.DB_NAME }}" \
            -var="ip=${{ secrets.IP }}" 
        working-directory: terraform/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  deploy:
    name: Deploy da API
    runs-on: ubuntu-latest
    needs: infra

    steps:
      - name: Obter IP da instância EC2
        id: get-ip
        run: |
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=app-instance" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text | head -n 1)
          echo "IP obtido: $IP"  # Debug: Verifique o IP retornado
          echo "IP=$IP" >> $GITHUB_ENV
          echo "::set-output name=IP::$IP"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: sa-east-1

      - name: Verificar IP obtido
        run: |
          echo "IP da instância: ${{ env.IP }}"

      - name: Aguardar instância EC2 estar acessível
        run: |
          for i in {1..10}; do
            nc -zv $IP 22 && break
            echo "Aguardando SSH..."
            sleep 5
          done
        env:
          IP: ${{ env.IP }}

      - name: Clonar repositório
        uses: actions/checkout@v3

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Construir a aplicação backend Java Spring
        working-directory: ./backend
        run: mvn clean package

      - name: Construir o frontend Angular
        working-directory: ./frontend
        run: |
          npm install
          npm run build -- --configuration=production

      - name: Criar imagem Docker do backend e enviar para Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t guilinares/dormitorio-bras-backend ./backend
          docker push guilinares/dormitorio-bras-backend:latest          

      - name: Criar imagem Docker do frontend e enviar para Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t guilinares/dormitorio-bras-frontend ./frontend
          docker push guilinares/dormitorio-bras-frontend:latest           

      - name: Debug IP
        run: echo "IP=${{ env.IP }}"

      - name: Aguardar EC2 estar pronta
        run: |
          echo "Aguardando EC2 inicializar..."
          for i in {1..30}; do
            nc -zv ${{ env.IP }} 22 && break
            echo "Aguardando mais 10 segundos..."
            sleep 10
          done      

      - name: Conectar na EC2 e atualizar a API
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ env.IP }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_KEY }}
          debug: true
          script: |
            sudo mkdir -p /home/ec2-user/api/deploy/postgres/init
            sudo mkdir -p /home/ec2-user/api/deploy/logs

            sudo cp /home/ec2-user/api/01_init.sql /home/ec2-user/api/deploy/postgres/init/01_init.sql
            sudo cp /home/ec2-user/api/02_data.sql /home/ec2-user/api/deploy/postgres/init/02_data.sql

            cd /home/ec2-user/api
            docker-compose down
            docker pull guilinares/dormitorio-bras-backend:latest
            docker pull guilinares/dormitorio-bras-frontend:latest
            docker-compose up -d